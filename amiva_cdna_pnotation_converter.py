import Bio
from Bio.Seq import Seq


canonical_flnc_isoform_1 = """ATGATGAACAACAGCGGCTACTCAGACGCCGGCCTCGGCCTGGGCGATGAGACAGACGAGATGCCGTCCA
CGGAGAAGGACCTGGCGGAGGACGCGCCGTGGAAGAAGATCCAGCAGAACACATTCACGCGCTGGTGCAA
TGAGCACCTCAAGTGCGTGGGCAAGCGCCTGACCGACCTGCAGCGCGACCTCAGCGACGGGCTCCGGCTC
ATCGCGCTGCTCGAGGTGCTCAGCCAGAAGCGCATGTACCGCAAGTTCCATCCGCGCCCCAACTTCCGCC
AAATGAAGCTGGAGAACGTGTCCGTGGCCCTCGAGTTCCTCGAGCGCGAGCACATCAAGCTCGTGTCCAT
AGACAGCAAGGCCATCGTGGATGGGAACCTGAAGCTGATCCTGGGCCTGATCTGGACGCTGATCCTGCAC
TACTCCATCTCCATGCCCATGTGGGAGGATGAAGATGATGAGGATGCCCGCAAACAGACGCCCAAGCAGC
GGCTGCTTGGCTGGATCCAGAACAAGGTGCCCCAGCTGCCCATCACCAACTTCAACCGTGACTGGCAGGA
CGGCAAAGCTCTGGGCGCCCTGGTGGACAACTGCGCCCCCGGTCTCTGCCCCGACTGGGAGGCCTGGGAC
CCCAACCAGCCCGTGGAGAACGCCCGGGAGGCCATGCAGCAGGCCGACGACTGGCTTGGGGTGCCCCAGG
TCATTGCCCCTGAGGAGATTGTGGACCCCAACGTGGATGAGCATTCTGTTATGACCTACCTGTCCCAGTT
CCCCAAGGCCAAGCTCAAACCTGGTGCCCCTGTTCGATCCAAGCAGCTGAACCCCAAGAAAGCCATCGCC
TATGGGCCTGGCATCGAGCCACAGGGCAACACCGTGCTGCAGCCTGCCCACTTCACCGTGCAGACGGTGG
ACGCGGGCGTGGGCGAGGTGCTGGTCTACATCGAGGACCCTGAAGGCCACACCGAGGAGGCTAAGGTGGT
TCCCAACAATGACAAGGATCGCACCTATGCTGTCTCCTATGTGCCCAAGGTCGCTGGGTTACACAAGGTG
ACCGTGCTCTTTGCTGGCCAGAACATTGAACGCAGTCCCTTTGAGGTGAACGTGGGCATGGCCCTGGGAG
ATGCCAACAAGGTGTCAGCCCGTGGCCCTGGCCTGGAACCTGTGGGCAATGTGGCCAACAAACCCACCTA
CTTTGACATCTACACTGCGGGGGCCGGCACTGGCGATGTTGCTGTGGTGATCGTGGACCCACAGGGCCGG
CGGGACACAGTGGAGGTGGCCCTGGAGGACAAGGGTGACAGCACGTTCCGCTGCACATACAGACCTGCCA
TGGAGGGGCCACATACCGTGCATGTGGCCTTTGCGGGTGCCCCCATCACCCGCAGTCCCTTCCCTGTCCA
TGTGTCGGAAGCCTGTAACCCCAACGCCTGCCGCGCCTCTGGGCGAGGCCTGCAGCCCAAGGGTGTTCGC
GTGAAAGAGGTGGCTGACTTCAAGGTGTTTACCAAGGGTGCCGGCAGCGGGGAGCTCAAGGTCACGGTCA
AGGGGCCAAAGGGCACAGAGGAGCCAGTGAAGGTGCGGGAGGCTGGGGATGGTGTGTTCGAGTGCGAGTA
CTACCCGGTGGTGCCTGGGAAGTATGTGGTGACCATCACGTGGGGCGGCTACGCCATCCCTCGCAGCCCC
TTTGAGGTACAGGTGAGCCCAGAGGCAGGAGTGCAAAAGGTCCGGGCCTGGGGTCCTGGTTTGGAGACTG
GCCAGGTGGGCAAGTCAGCCGATTTTGTGGTGGAAGCCATTGGCACCGAGGTGGGGACACTGGGCTTCTC
CATCGAGGGGCCCTCACAAGCCAAGATCGAATGTGACGACAAGGGGGATGGCTCCTGCGATGTGCGGTAC
TGGCCCACGGAGCCTGGGGAGTACGCTGTGCACGTCATCTGTGACGATGAGGACATCCGAGACTCACCCT
TCATTGCCCACATCCTGCCCGCCCCACCTGACTGCTTCCCAGATAAGGTGAAGGCCTTTGGGCCTGGCCT
GGAGCCTACCGGCTGCATCGTGGACAAGCCCGCTGAGTTCACCATTGATGCTCGTGCAGCTGGCAAGGGA
GACCTGAAGCTCTATGCCCAGGACGCCGACGGCTGTCCCATCGACATCAAGGTGATCCCCAACGGCGACG
GCACCTTCCGCTGCTCCTACGTGCCCACCAAGCCCATTAAGCACACCATCATCATCTCCTGGGGAGGCGT
AAACGTGCCCAAGAGCCCCTTCCGGGTGAACGTGGGCGAGGGCAGCCACCCCGAGCGGGTAAAGGTGTAC
GGCCCCGGAGTGGAGAAGACAGGCCTCAAGGCCAATGAGCCCACCTACTTCACGGTGGACTGCAGCGAGG
CGGGGCAAGGCGACGTGAGCATCGGCATCAAGTGCGCCCCAGGCGTGGTGGGCCCTGCAGAGGCTGACAT
TGACTTCGACATCATCAAGAATGACAACGACACCTTCACCGTCAAGTACACGCCACCAGGGGCGGGCCGC
TACACCATCATGGTGCTGTTTGCCAACCAGGAGATCCCCGCCAGCCCCTTCCACATCAAGGTGGACCCAT
CCCACGATGCCAGCAAAGTCAAGGCCGAGGGCCCTGGGCTGAATCGCACAGGTGTGGAAGTCGGGAAGCC
CACCCACTTCACGGTGCTGACCAAGGGAGCCGGCAAGGCCAAGCTGGATGTGCAGTTTGCAGGGACAGCC
AAGGGCGAGGTTGTGCGGGACTTTGAGATCATAGACAACCATGACTACTCCTACACTGTCAAGTACACCG
CTGTCCAGCAGGGCAACATGGCAGTGACAGTGACTTATGGCGGGGACCCTGTCCCCAAGAGCCCCTTTGT
GGTGAATGTGGCACCCCCGCTGGACCTCAGCAAAATCAAAGTTCAGGGCCTTAATAGCAAGGTGGCTGTG
GGACAGGAACAAGCATTCTCTGTGAACACACGAGGGGCTGGCGGTCAGGGCCAACTGGATGTGCGGATGA
CTTCGCCCTCTCGCCGGCCCATCCCCTGCAAGCTGGAGCCAGGCGGTGGAGCGGAAGCCCAGGCTGTGCG
CTACATGCCCCCGGAGGAGGGGCCCTACAAGGTGGATATCACCTACGATGGTCACCCGGTGCCTGGCAGC
CCGTTTGCTGTGGAGGGTGTCCTGCCCCCTGATCCCTCCAAGGTCTGTGCTTATGGCCCGGGTCTCAAGG
GTGGACTGGTAGGCACCCCCGCGCCATTCTCCATCGACACCAAGGGGGCTGGCACAGGTGGCCTGGGGCT
GACCGTAGAGGGCCCCTGCGAGGCCAAGATCGAGTGCCAGGACAATGGTGATGGCTCATGTGCTGTCAGC
TACCTGCCCACGGAGCCTGGCGAGTACACCATCAACATCCTGTTTGCTGAGGCCCACATCCCTGGCTCGC
CCTTCAAAGCCACCATTCGGCCTGTGTTTGACCCGAGCAAGGTGCGGGCCAGTGGACCGGGCCTGGAGCG
CGGCAAGGTCGGTGAGGCAGCCACCTTCACTGTGGACTGCTCAGAGGCAGGCGAGGCGGAGCTGACCATT
GAGATCCTGTCGGATGCCGGGGTCAAGGCCGAGGTGCTGATCCACAACAACGCGGATGGCACCTACCACA
TCACCTACAGCCCTGCCTTCCCTGGCACCTACACCATTACCATCAAGTATGGCGGGCATCCCGTGCCCAA
ATTCCCCACCCGTGTCCATGTGCAGCCTGCGGTCGATACCAGTGGCGTCAAGGTCTCAGGGCCTGGTGTT
GAGCCACACGGTGTCCTGCGGGAGGTGACCACTGAGTTCACTGTGGATGCAAGATCCCTAACAGCCACAG
GCGGCAACCACGTGACGGCTCGTGTGCTCAACCCCTCGGGGGCCAAGACAGACACCTATGTGACAGACAA
TGGGGACGGCACCTACCGAGTGCAGTACACCGCCTACGAGGAGGGCGTGCATCTGGTGGAGGTCCTGTAT
GATGAGGTCGCTGTGCCCAAGAGCCCCTTCCGAGTGGGCGTGACCGAGGGCTGTGATCCCACCCGCGTCC
GAGCCTTCGGGCCAGGCCTGGAGGGTGGCTTGGTCAACAAGGCCAACCGATTCACTGTGGAGACCAGGGG
AGCGGGCACCGGGGGCCTTGGCCTAGCCATCGAGGGTCCCTCGGAAGCCAAGATGTCCTGCAAGGACAAC
AAGGATGGTAGCTGCACCGTGGAGTACATCCCCTTCACTCCTGGAGACTATGACGTCAACATCACCTTCG
GGGGGCGGCCCATCCCAGGGAGCCCGTTCCGCGTGCCAGTGAAGGATGTGGTGGACCCTGGGAAGGTGAA
GTGCTCAGGGCCAGGGCTGGGGGCTGGTGTCAGGGCCCGGGTTCCTCAGACCTTCACAGTGGACTGCAGT
CAAGCTGGCCGGGCGCCCCTGCAGGTGGCTGTGCTGGGCCCCACAGGTGTGGCCGAGCCTGTGGAGGTGC
GGGACAATGGAGATGGCACCCACACTGTCCACTACACCCCAGCCACTGACGGGCCCTACACGGTAGCCGT
CAAGTATGCTGACCAGGAGGTGCCACGCAGCCCCTTCAAGATCAAGGTCCTCCCAGCTCATGATGCCAGC
AAGGTGCGGGCCAGCGGCCCAGGCCTCAACGCCTCTGGCATCCCTGCCAGCCTGCCTGTGGAGTTCACCA
TCGACGCACGGGACGCGGGCGAGGGGTTGCTCACTGTCCAGATCTTGGACCCCGAGGGTAAGCCCAAGAA
GGCCAACATCCGGGACAATGGGGATGGCACGTACACTGTGTCCTACCTGCCGGACATGAGTGGCCGGTAC
ACCATCACCATCAAGTATGGCGGTGATGAGATCCCCTACTCGCCCTTCCGCATCCATGCTCTGCCCACTG
GGGATGCCAGCAAGTGCCTCGTCACAGTGTCCATTGGAGGCCATGGCCTGGGTGCCTGCCTGGGCCCTCG
AATCCAGATTGGGCAGGAGACGGTGATCACGGTGGATGCCAAGGCAGCCGGTGAGGGGAAGGTGACATGC
ACGGTGTCCACGCCGGATGGGGCAGAGCTCGATGTGGATGTGGTTGAGAACCATGACGGTACCTTTGACA
TCTACTACACAGCGCCCGAGCCGGGCAAGTACGTCATCACCATCCGCTTCGGGGGTGAGCACATCCCCAA
CAGCCCCTTCCACGTGCTGGCGTGTGACCCCCTGCCGCACGAGGAGGAGCCCTCTGAAGTGCCACAGCTG
CGCCAGCCCTACGCTCCTCCCCGGCCCGGCGCCCGCCCCACACACTGGGCCACAGAGGAGCCAGTGGTGC
CTGTGGAGCCAATGGAGTCCATGCTGAGGCCCTTCAACCTGGTCATCCCCTTCGCGGTGCAGAAAGGGGA
GCTCACAGGAGAGGTGCGGATGCCCTCGGGGAAGACGGCACGGCCCAACATCACCGACAACAAGGACGGC
ACCATCACGGTGAGGTATGCACCCACTGAGAAAGGCCTGCACCAGATGGGGATCAAGTATGACGGCAACC
ACATCCCTGGGAGCCCCTTACAGTTCTATGTGGATGCCATCAACAGCCGCCATGTCAGTGCCTATGGGCC
AGGCCTGAGCCATGGCATGGTCAACAAGCCAGCCACCTTCACTATTGTCACCAAAGATGCTGGAGAAGGG
GGTCTGTCACTGGCCGTGGAGGGCCCATCCAAGGCAGAGATCACCTGTAAGGACAACAAGGATGGCACCT
GCACCGTGTCCTATCTGCCGACTGCGCCTGGAGACTACAGCATCATCGTGCGCTTCGATGACAAGCACAT
CCCGGGGAGCCCCTTCACAGCCAAGATCACAGGTGATGACTCCATGAGGACCTCACAGCTGAATGTGGGC
ACCTCCACGGACGTGTCACTGAAGATCACCGAGAGTGATCTGAGCCAGCTGACCGCCAGCATCCGTGCCC
CCTCGGGCAACGAGGAGCCCTGCCTGCTGAAGCGCCTGCCCAACCGGCACATTGGGATCTCCTTCACCCC
CAAGGAGGTCGGGGAGCACGTGGTGAGCGTGCGCAAGAGTGGCAAGCATGTCACCAACAGCCCCTTCAAG
ATCCTGGTGGGGCCATCTGAGATCGGGGACGCCAGCAAGGTGCGGGTCTGGGGCAAGGGGCTTTCCGAGG
GACACACATTCCAGGTGGCAGAGTTCATCGTGGACACTCGCAATGCAGGTTATGGGGGCTTGGGGCTGAG
TATTGAAGGCCCAAGCAAGGTGGACATCAACTGTGAGGACATGGAGGACGGGACATGCAAAGTCACCTAC
TGCCCCACCGAGCCCGGCACCTACATCATCAACATCAAGTTTGCTGACAAGCACGTGCCTGGAAGCCCCT
TCACTGTGAAGGTGACCGGCGAGGGCCGCATGAAGGAGAGCATCACCCGGCGGAGACAGGCACCTTCCAT
CGCCACCATCGGCAGCACCTGTGACCTCAACCTCAAGATCCCAGGAAACTGGTTCCAGATGGTGTCTGCC
CAGGAGCGCCTGACACGCACCTTCACACGCAGCAGCCACACCTACACCCGCACGGAGCGCACGGAGATCA
GCAAGACGCGGGGCGGGGAGACAAAGCGCGAGGTGCGGGTGGAGGAGTCCACCCAGGTCGGCGGGGACCC
CTTCCCTGCTGTGTTTGGGGACTTCCTGGGCCGGGAGCGCCTGGGATCCTTCGGCAGCATCACCCGGCAG
CAGGAGGGTGAGGCCAGCTCTCAGGACATGACTGCACAGGTGACCAGCCCATCGGGCAAGGTGGAAGCCG
CAGAGATCGTCGAGGGCGAGGACAGCGCCTACAGCGTGCGCTTTGTGCCCCAGGAAATGGGGCCCCATAC
GGTCGCTGTCAAGTACCGTGGCCAGCACGTGCCCGGCAGCCCCTTTCAGTTCACTGTGGGGCCGCTGGGT
GAAGGTGGTGCCCACAAGGTGCGGGCCGGAGGCACAGGGCTGGAGCGAGGTGTGGCCGGCGTGCCAGCCG
AGTTCAGCATCTGGACCCGGGAGGCTGGCGCTGGGGGCCTGTCCATTGCTGTGGAGGGTCCTAGCAAAGC
GGAGATTGCATTTGAGGATCGCAAAGATGGCTCCTGCGGCGTCTCCTATGTCGTCCAGGAACCAGGTGAC
TATGAGGTCTCCATCAAGTTCAATGATGAGCACATCCCAGACAGCCCCTTTGTGGTGCCTGTGGCCTCCC
TCTCGGATGACGCTCGCCGTCTCACTGTCACCAGCCTCCAGGAGACGGGGCTCAAGGTGAACCAGCCAGC
GTCCTTTGCCGTGCAGCTGAACGGTGCCCGGGGCGTGATTGATGCCCGGGTGCACACACCCTCGGGGGCT
GTGGAGGAGTGCTACGTCTCTGAGCTGGACAGTGACAAGCACACCATCCGCTTCATCCCCCACGAGAATG
GCGTCCACTCCATCGATGTCAAGTTCAACGGTGCCCACATCCCTGGAAGTCCCTTCAAGATCCGCGTTGG
GGAGCAGAGCCAGGCTGGGGACCCAGGCTTGGTGTCAGCCTACGGTCCTGGGCTCGAGGGAGGCACTACC
GGTGTGTCATCAGAGTTCATCGTGAACACCCTGAATGCCGGCTCGGGGGCCTTGTCTGTCACCATTGATG
GCCCCTCCAAGGTGCAGCTGGACTGTCGGGAGTGTCCTGAGGGCCATGTGGTCACTTATACTCCCATGGC
CCCTGGCAACTACCTCATTGCCATCAAGTACGGTGGCCCCCAGCACATCGTGGGCAGCCCCTTCAAGGCC
AAGGTCACTGGTCCGAGGCTGTCCGGAGGCCACAGCCTTCACGAAACATCCACGGTTCTGGTGGAGACTG
TGACCAAGTCCTCCTCAAGCCGGGGCTCCAGCTACAGCTCCATCCCCAAGTTCTCCTCAGATGCCAGCAA
GGTGGTGACTCGGGGCCCTGGGCTGTCCCAGGCCTTCGTGGGCCAGAAGAACTCCTTCACCGTGGACTGC
AGCAAAGCAGGCACCAACATGATGATGGTGGGCGTGCACGGCCCCAAGACCCCCTGTGAGGAGGTGTACG
TGAAGCACATGGGGAACCGGGTGTACAATGTCACCTACACTGTCAAGGAGAAAGGGGACTACATCCTCAT
TGTCAAGTGGGGTGACGAAAGTGTCCCTGGAAGCCCCTTCAAAGTCAAGGTCCCTTGA"""

coding_dna = [x for x in canonical_flnc_isoform_1 if x != "\n"] #get rid of \n

#print(len(coding_dna)//3) #according to most used canonicalseq flnc_isoform_1 _full sequence ! (not only cdna), RESULTS ARE IDENTICAL to JOB VERDONSCHOT ET AL annotation.
user_cdna = input("Please enter the FLNc c.DNA mutation of your interest\nthat you want to convert to p.notation level:\n")

#check if c.DNA is written accordingly to convention or sloppy. If sloppy -> correct it.
if user_cdna[0] != "c" and user_cdna[0] != "C":
    user_cdna = "c."+ user_cdna

pos = int(user_cdna[2:-3])  #position of mutation
mut_type = user_cdna[-3:] #type of mutation

wildtype_dna = "".join(coding_dna) #storing original wildtype dna for later transcription and translation to get wildtype amino acid
coding_dna[pos-1] = mut_type[-1]   #inserting mutation
coding_dna_mut = "".join(coding_dna)   #back to string type

#initializing a seq.IO object which will be transcribed (from cDNA level to to mRNA level)
#will transcribe all T -> U and store both as mRNA objects
coding_mrna = Seq(coding_dna_mut).transcribe()
wildtype_mrna = Seq(wildtype_dna).transcribe()


#fetch corresponding codon:
"""Codons are translated with the ratio of 3 to 1:
eg. AUG will be translated to amino acid Methionin.
We therefore need to fetch the correct codon for each amino acid which is done below"""

if pos % 3 == 0:
    mut_codon = coding_mrna[pos-3:pos]
    wild_codon = wildtype_mrna[pos-3:pos]
elif pos % 3 == 1:
    mut_codon = coding_mrna[pos-1:pos+2]
    wild_codon = wildtype_mrna[pos-1:pos+2]
elif pos % 3 == 2:
    mut_codon = coding_mrna[pos-2:pos + 1]
    wild_codon = wildtype_mrna[pos-2:pos +1]


mutated_amino_acid = mut_codon.translate()
wildtype_amino_acid = wild_codon.translate()

pos = ((pos-1)//3) +1  #3 nucleotides are translated into 1 aa hence /3   c.DNA pos 12 = amino acid position 4 e.g  +1 because numbering starts at 1 not 0! // == floordivision without reminder.
result = wildtype_amino_acid+str(pos)+mutated_amino_acid
print(result)

